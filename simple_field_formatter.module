<?php

/**
 * Implements hook_field_formatter_info_alter().
 */
function simple_field_formatter_field_formatter_info_alter(&$info) {
  // added to ALL formatters...
  foreach ($info as $formatter_key => &$formatter) {
    $formatter['settings'] += array(
        'custom_prefix' => '', //give a default value for when the form is first loaded
        'custom_suffix' => '', //ditto
        'custom_reverse' => '',
        'custom_trim' => '',
        'custom_strtolower' => '',
        'custom_strtoupper' => '',
        'custom_ucfirst' => '',
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function simple_field_formatter_field_formatter_settings_summary_alter(&$summary, $context) {

  $settings = $context['formatter']->getSettings();
  // Normalize the settings.
  $custom_prefix = $settings['custom_prefix'];
  $custom_suffix = $settings['custom_suffix'];
  $custom_reverse = $settings['custom_reverse'];
  $custom_trim = $settings['custom_trim'];
  $custom_strtolower = $settings['custom_strtolower'];
  $custom_strtoupper = $settings['custom_strtoupper'];
  $custom_ucfirst = $settings['custom_ucfirst'];

  $summary_items = array();

  if ($custom_prefix) {
    $summary_items[] = t('Prefix: @custom_prefix', array('@custom_prefix' => $custom_prefix));
  }
  if ($custom_suffix) {
    $summary_items[] = t('Suffix: @custom_suffix', array('@custom_suffix' => $custom_suffix));
  }
  if ($custom_reverse) {
    $summary_items[] = t('Reverse: @custom_reverse', array('@custom_reverse' => $custom_reverse));
  }
  if ($custom_trim) {
    $summary_items[] = t('Trim: @custom_trim', array('@custom_trim' => $custom_trim));
  }
  if ($custom_strtolower) {
    $summary_items[] = t('strtolower: @custom_strtolower', array('@custom_strtolower' => $custom_strtolower));
  }
  if ($custom_strtoupper) {
    $summary_items[] = t('strtoupper: @custom_strtoupper', array('@custom_strtoupper' => $custom_strtoupper));
  }
  if ($custom_ucfirst) {
    $summary_items[] = t('ucfirst: @custom_ucfirst', array('@custom_ucfirst' => $custom_ucfirst));
  }
  $summary[] = theme('item_list', array('items' => $summary_items, 'title' => 'Custom'));
}

/**
 * Implements hook_field_attach_view_alter().
 *
 */
function simple_field_formatter_field_attach_view_alter(&$output, $context) {
  $entity_display = entity_get_render_display($context['entity'], $context['view_mode']);
 	foreach (element_children($output) as $field_name) {

 	  $element = &$output[$field_name];

      $component = $entity_display->getComponent($field_name);
      $settings = $component['settings'];

 	  if (!empty($settings)) {
 	    $custom_prefix = $settings['custom_prefix'];
 	    $custom_suffix = $settings['custom_suffix'];
 	    $custom_reverse = $settings['custom_reverse'];
 	    $custom_trim = $settings['custom_trim'];
 	    $custom_strtolower = $settings['custom_strtolower'];
 	    $custom_strtoupper = $settings['custom_strtoupper'];
 	    $custom_ucfirst = $settings['custom_ucfirst'];
 	  }
 	  foreach ($element['#items'] as $delta => $item) {
 	    if(isset($item['processed'])){
 	      $original_value = $item['processed']; // Getting the actual value
 	      $modified_value = $original_value;
 	      if($custom_reverse){
 	        $modified_value = strrev($modified_value);
 	      }
 	      if($custom_trim){
 	        $modified_value = trim($modified_value);
 	      }
 	      if($custom_strtolower){
 	        $modified_value = strtolower($modified_value);
 	      }
 	      if($custom_strtoupper){
 	        $modified_value = strtoupper($modified_value);
 	      }
 	      if($custom_ucfirst){
 	        $modified_value = ucfirst($modified_value);
 	      }
 	      if($modified_value != $original_value){
 	        $element[$delta]['#markup'] = $modified_value;
 	      }
 	    }
 	    if (!empty($custom_suffix)) {
 	      $element[$delta]['#suffix'] = $custom_suffix;
 	    }
 	    if (!empty($custom_prefix)) {
 	      $element[$delta]['#prefix'] = $custom_prefix;
 	    }
 	    //$modified_value = $custom_prefix . $original_value . $custom_suffix;
 	    //$element[$delta]['#markup'] = $modified_value;
 	  }

 	}
}

function simple_field_formatter_field_formatter_settings_form_alter(&$element, &$form_state, $context) {

  $element['custom_prefix'] = array(
      '#type'           => 'textfield',                        // Use a textbox
      '#title'          => t('Prefix'),                      // Widget label
      '#description'    => t('Prefix will display before the content.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_prefix'),               // Get the value if it's already been set
  );
  $element['custom_suffix'] = array(
      '#type'           => 'textfield',                        // Use a textbox
      '#title'          => t('Suffix'),                      // Widget label
      '#description'    => t('Suffix will display after the content.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_suffix'),               // Get the value if it's already been set
  );
  $element['custom_reverse'] = array(
      '#type'           => 'checkbox',                        // Use a textbox
      '#title'          => t('Reverse'),                      // Widget label
      '#description'    => t('Reverses the Content.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_reverse'),               // Get the value if it's already been set
  );
  $element['custom_trim'] = array(
      '#type'           => 'checkbox',                        // Use a textbox
      '#title'          => t('Trim'),                      // Widget label
      '#description'    => t('Removes Leading & trailing spaces from the Content.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_trim'),               // Get the value if it's already been set
  );
  $element['custom_strtolower'] = array(
      '#type'           => 'checkbox',                        // Use a textbox
      '#title'          => t('strtolower'),                      // Widget label
      '#description'    => t('Converts a string to lowercase letters.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_strtolower'),               // Get the value if it's already been set
  );
  $element['custom_strtoupper'] = array(
      '#type'           => 'checkbox',                        // Use a textbox
      '#title'          => t('strtoupper'),                      // Widget label
      '#description'    => t('Converts a string to uppercase letters.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_strtoupper'),               // Get the value if it's already been set
  );
  $element['custom_ucfirst'] = array(
      '#type'           => 'checkbox',                        // Use a textbox
      '#title'          => t('ucfirst'),                      // Widget label
      '#description'    => t('Converts the first character of a string to uppercase.'),  // helper text
      '#default_value'  => $context['formatter']->getSetting('custom_ucfirst'),               // Get the value if it's already been set
  );
}